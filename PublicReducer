import ComposableArchitecture
import SwiftUI

@Reducer
public struct <#ReducerName#> {
    @ObservableState
    public struct State: Equatable {
        public init() {}
    }
    
    public enum Action {
        case task
    }

    public init() {}
    
    public var body: some Reducer<State, Action> {
        Reduce<State, Action> { state, action in
            switch action {
            default:
                return .none
            }
        }
    }
}

public struct <#ViewName#>: View {
    let store: StoreOf<<#ReducerName#>>
    
    public init(
        store: StoreOf<<#ReducerName#>>
    ) {
        self.store = store
    }
    
    public var body: some View {
        VStack {
            Text("My View")
        }
        .task {
            store.send(.task)
        }
    }
}

#Preview {
    <#ViewName#>(
        store: .init(
            initialState: .init(),
            reducer: {
                <#ReducerName#>()
                    ._printChanges()
            }
        )
    )
}
